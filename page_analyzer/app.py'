import os

from flask import (
    get_flashed_messages,
    flash,
    Flask,
    redirect,
    render_template,
    request,
    url_for
)

import psycopg2

from dotenv import load_dotenv

import validators

from urllib.parse import urlparse

from page_analyzer.url_repository import UrlRepository


app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')
DATABASE_URL = os.getenv('DATABASE_URL')

conn = psycopg2.connect(DATABASE_URL)
repo = UrlRepository(conn)


#@app.route('/')
#def urls_index():
#    term = request.args.get('query')
#    if term:
#        users = repo.get_by_term(search_term=term)
#    else:
#        users = repo.get_content()
#    return render_template('users/index.html', search=term, users=users)


@app.route('/urls/<int:id>')
def urls_get(id):
    url = repo.find_id(id)
    messages = get_flashed_messages(with_categories='True')
    print(messages[0])
    return render_template(
        'show.html',
        url=url,
        messages=messages
    )


@app.get('/')
def url_new():
    return render_template('index.html', url='', messages='')


@app.route('/urls')
def urls_all():
    url_repo_all = repo.get_content()
    return render_template(
        'view.html',
        urls=url_repo_all
    )


@app.route('/urls', methods=['POST'])
def urls_post():
    input_url = request.form.get('url')
    if validators.url(input_url):
        parsed_url = urlparse(input_url)
        norm_url = f"{parsed_url.scheme}://{parsed_url.netloc}"
        url_repo = repo.find_name(norm_url)
        if url_repo is None:
            id = repo.save(norm_url)
            flash('Страница успешно добавлена', 'success')
            return redirect(f'urls/{id}'), 302
        else:
            id = url_repo['id']
            flash('Страница уже существует', 'error')
            return redirect(f'urls/{id}', 302)
    else:
        flash('Некорректный URL', 'error')
        return render_template('index.html', url=input_url)
